import UIKit

// MARK: - 创造型模式: 提供创建对象的机制，增加已有代码的灵活性和可复用性
/// 1.工厂方法 FactoryMethod: 抽象出一个构建方法，一个工厂生产不同的产品。每个产品一个类
/// 2.抽象工厂 AbstractFactory: 通常基于一组工厂方法，创建一系列相关的对象。不同的工厂生产同一系列中的不同产品。每个产品一个类
/// 3.生成器 Bulider: 分步骤创建复杂对象，用于init参数过多或swift中的方法链和高级函数，创建者中的方法可返回自身或者返回创建的产品
/// 4.原型 Prototype: 复制已有对象，swift中的NSCoping接口，个人理解是可做到深拷贝的引用类型class
/// 5.单例 Singleton: 一个类只有一个实例，关键代码是提供一个访问该实例的全局静态属性static，需要注意并发情况


// MARK: - 结构型模式: 介绍如何将对象和类组装成较大的结构，并同时保持结构的灵活和高效
/// 1.适配器 Adapter: 使接口不兼容的对象能够相互合作。
/// 2.桥接 Bridge: 可将一个大类或一系列紧密相关的类拆分为抽象和实现两个独立的层次结构
/// 3.装饰 Decorator: 在运行时为对象新增叠加额外的行为，递归
/// 4.外观 Facade: 为现有对象定义了一个新接口，封装第三方库，提供常用方法功能以及自定义参数
/// 5.代理 Proxy: 代理模式会将所有实际工作委派给一些其他对象。 可在无需修改客户代码的前提下于已有类的对象上增加额外行为
/// 6.组合 Composite:  将对象组合成树状结构，递归
/// 7.享元 Flyweight:  建立缓存池，如果已有相应的享元就直接复用，没有找到就新建并添加到缓存池中。类似collectionViewCell的复用

// MARK: - 行为模式: 负责对象间高效沟通和职责委派
/// 1.责任链 Chain of responsibility：用于处理请求发送者和接收者之间的不同连接方式，按照顺序将请求动态传递给一系列的潜在接收者， 直至其中一名接收者对请求进行处理。通常和组合模式结合使用
/// 2.命令 Command：用于处理请求发送者和接收者之间的不同连接方式，在发送者和请求者之间建立单向连接。将请求或简单操作转换为一个对象。
/// 3. 迭代器 Iterator：遍历集合中所有的元素，Sequence & IteratorProtocol
/// 4.中介者 Mediator: MVC模式，用于处理请求发送者和接收者之间的不同连接方式，清除了发送者和请求者之间的直接连接， 强制它们通过一个中介对象进行间接沟通，与观察者可配合使用
/// 5.备忘录 Memento：在不暴露对象实现细节的情况下保存和恢复对象之前的状态。将需保存的属性封装成一个类。可用序列化来实现。decode
/// 6. 观察者 Observer：用于处理请求发送者和接收者之间的不同连接方式，允许接收者动态地订阅或取消接收请求，一对多，通知中心，对象间动态的单向连接
/// 7.状态 State: 将与状态相关的行为抽取到独立的状态类中，状态可视为策略的拓展，策略使得这些对象相互之间完全独立，状态知道类之间的依赖
/// 8.策略 Strategy: 将一组行为转换为对象，抽象出细节具体的方法，策略模式抽象并封装业务细节,只给出相关的策略接口作为切换，可基于switch使用
/// 9.模版方法 Template Method: 基于继承机制，子类可重写父类中的部分方法。其中，父类中部分共有统一方法不可修改
/// 10.访问者 Visitor: 命令模式加强版本，其对象可对不同类的多种对象执行操作


